// This file is provided under The MIT License as part of Steamworks.NET.
// Copyright (c) 2013-2022 Riley Labrecque
// Please see the included LICENSE.txt for additional information.

// This file is automatically generated.
// Changes to this file will be reverted when you update Steamworks.NET

#if !(UNITY_STANDALONE_WIN || UNITY_STANDALONE_LINUX || UNITY_STANDALONE_OSX || STEAMWORKS_WIN || STEAMWORKS_LIN_OSX)
	#define DISABLESTEAMWORKS
#endif

#if !DISABLESTEAMWORKS

using System.Runtime.InteropServices;
using IntPtr = System.IntPtr;

namespace Steamworks {
	public static class SteamScreenshots {
		/// <summary>
		/// <para> Writes a screenshot to the user's screenshot library given the raw image data, which must be in RGB format.</para>
		/// <para> The return value is a handle that is valid for the duration of the game process and can be used to apply tags.</para>
		/// <para>给定原始映像数据，将屏幕截图写入用户的屏幕截图库，该数据必须是RGB格式。返回值是一个在游戏过程持续时间内有效的句柄，可用于应用标签。</para>
		/// </summary>
		public static ScreenshotHandle WriteScreenshot(byte[] pubRGB, uint cubRGB, int nWidth, int nHeight) {
			InteropHelp.TestIfAvailableClient();
			return (ScreenshotHandle)NativeMethods.ISteamScreenshots_WriteScreenshot(CSteamAPIContext.GetSteamScreenshots(), pubRGB, cubRGB, nWidth, nHeight);
		}

		/// <summary>
		/// <para> Adds a screenshot to the user's screenshot library from disk.  If a thumbnail is provided, it must be 200 pixels wide and the same aspect ratio</para>
		/// <para> as the screenshot, otherwise a thumbnail will be generated if the user uploads the screenshot.  The screenshots must be in either JPEG or TGA format.</para>
		/// <para> The return value is a handle that is valid for the duration of the game process and can be used to apply tags.</para>
		/// <para> JPEG, TGA, and PNG formats are supported.</para>
		/// <para>从磁盘上向用户的屏幕快照库中添加屏幕快照。如果提供了缩略图，则必须宽200个像素，并且长宽比与屏幕截图相同，否则如果用户上传屏幕截图，则将生成缩略图。屏幕截图必须为JPEG或TGA格式。返回值是一个在游戏过程持续时间内有效的句柄，可用于应用标签。支持JPEG，TGA和PNG格式。</para>
		/// </summary>
		public static ScreenshotHandle AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight) {
			InteropHelp.TestIfAvailableClient();
			using (var pchFilename2 = new InteropHelp.UTF8StringHandle(pchFilename))
			using (var pchThumbnailFilename2 = new InteropHelp.UTF8StringHandle(pchThumbnailFilename)) {
				return (ScreenshotHandle)NativeMethods.ISteamScreenshots_AddScreenshotToLibrary(CSteamAPIContext.GetSteamScreenshots(), pchFilename2, pchThumbnailFilename2, nWidth, nHeight);
			}
		}

		/// <summary>
		/// <para> Causes the Steam overlay to take a screenshot.  If screenshots are being hooked by the game then a ScreenshotRequested_t callback is sent back to the game instead.</para>
		/// <para>导致蒸汽叠加层进行屏幕截图。如果游戏挂上屏幕截图，则将ScreenShotRequested_t回调发送回游戏。</para>
		/// </summary>
		public static void TriggerScreenshot() {
			InteropHelp.TestIfAvailableClient();
			NativeMethods.ISteamScreenshots_TriggerScreenshot(CSteamAPIContext.GetSteamScreenshots());
		}

		/// <summary>
		/// <para> Toggles whether the overlay handles screenshots when the user presses the screenshot hotkey, or the game handles them.  If the game is hooking screenshots,</para>
		/// <para> then the ScreenshotRequested_t callback will be sent if the user presses the hotkey, and the game is expected to call WriteScreenshot or AddScreenshotToLibrary</para>
		/// <para> in response.</para>
		/// <para>当用户按下屏幕截图热键或游戏处理时，切换覆盖层是否处理屏幕截图。如果游戏正在挂接屏幕截图，则如果用户按下热键，则将发送ScreenShotRequested_t回调，并且预计游戏将致电WritesCreenshot或AddScreenShottOlibrary响应。</para>
		/// </summary>
		public static void HookScreenshots(bool bHook) {
			InteropHelp.TestIfAvailableClient();
			NativeMethods.ISteamScreenshots_HookScreenshots(CSteamAPIContext.GetSteamScreenshots(), bHook);
		}

		/// <summary>
		/// <para> Sets metadata about a screenshot's location (for example, the name of the map)</para>
		/// <para>设置有关屏幕快照位置的元数据（例如，地图的名称）</para>
		/// </summary>
		public static bool SetLocation(ScreenshotHandle hScreenshot, string pchLocation) {
			InteropHelp.TestIfAvailableClient();
			using (var pchLocation2 = new InteropHelp.UTF8StringHandle(pchLocation)) {
				return NativeMethods.ISteamScreenshots_SetLocation(CSteamAPIContext.GetSteamScreenshots(), hScreenshot, pchLocation2);
			}
		}

		/// <summary>
		/// <para> Tags a user as being visible in the screenshot</para>
		/// <para>标记用户在屏幕截图中可见</para>
		/// </summary>
		public static bool TagUser(ScreenshotHandle hScreenshot, CSteamID steamID) {
			InteropHelp.TestIfAvailableClient();
			return NativeMethods.ISteamScreenshots_TagUser(CSteamAPIContext.GetSteamScreenshots(), hScreenshot, steamID);
		}

		/// <summary>
		/// <para> Tags a published file as being visible in the screenshot</para>
		/// <para>标记已发布的文件在屏幕截图中可见</para>
		/// </summary>
		public static bool TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID) {
			InteropHelp.TestIfAvailableClient();
			return NativeMethods.ISteamScreenshots_TagPublishedFile(CSteamAPIContext.GetSteamScreenshots(), hScreenshot, unPublishedFileID);
		}

		/// <summary>
		/// <para> Returns true if the app has hooked the screenshot</para>
		/// <para>如果应用程序已挂起屏幕截图，则返回true</para>
		/// </summary>
		public static bool IsScreenshotsHooked() {
			InteropHelp.TestIfAvailableClient();
			return NativeMethods.ISteamScreenshots_IsScreenshotsHooked(CSteamAPIContext.GetSteamScreenshots());
		}

		/// <summary>
		/// <para> Adds a VR screenshot to the user's screenshot library from disk in the supported type.</para>
		/// <para> pchFilename should be the normal 2D image used in the library view</para>
		/// <para> pchVRFilename should contain the image that matches the correct type</para>
		/// <para> The return value is a handle that is valid for the duration of the game process and can be used to apply tags.</para>
		/// <para> JPEG, TGA, and PNG formats are supported.</para>
		/// <para>从受支持类型的磁盘中将VR屏幕快照添加到用户的屏幕截图库中。PCHFILENAME应该是库视图中使用的普通2D图像PCHVRFILENAME应包含匹配正确类型的映像。返回值是一个在游戏过程持续时间内有效的句柄，可用于应用标签。支持JPEG，TGA和PNG格式。</para>
		/// </summary>
		public static ScreenshotHandle AddVRScreenshotToLibrary(EVRScreenshotType eType, string pchFilename, string pchVRFilename) {
			InteropHelp.TestIfAvailableClient();
			using (var pchFilename2 = new InteropHelp.UTF8StringHandle(pchFilename))
			using (var pchVRFilename2 = new InteropHelp.UTF8StringHandle(pchVRFilename)) {
				return (ScreenshotHandle)NativeMethods.ISteamScreenshots_AddVRScreenshotToLibrary(CSteamAPIContext.GetSteamScreenshots(), eType, pchFilename2, pchVRFilename2);
			}
		}
	}
}

#endif // !DISABLESTEAMWORKS
