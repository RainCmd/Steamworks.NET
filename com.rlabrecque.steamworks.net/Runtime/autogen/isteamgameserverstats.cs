// This file is provided under The MIT License as part of Steamworks.NET.
// Copyright (c) 2013-2022 Riley Labrecque
// Please see the included LICENSE.txt for additional information.

// This file is automatically generated.
// Changes to this file will be reverted when you update Steamworks.NET

#if !(UNITY_STANDALONE_WIN || UNITY_STANDALONE_LINUX || UNITY_STANDALONE_OSX || STEAMWORKS_WIN || STEAMWORKS_LIN_OSX)
	#define DISABLESTEAMWORKS
#endif

#if !DISABLESTEAMWORKS

using System.Runtime.InteropServices;
using IntPtr = System.IntPtr;

namespace Steamworks {
	public static class SteamGameServerStats {
		/// <summary>
		/// <para> downloads stats for the user</para>
		/// <para> returns a GSStatsReceived_t callback when completed</para>
		/// <para> if the user has no stats, GSStatsReceived_t.m_eResult will be set to k_EResultFail</para>
		/// <para> these stats will only be auto-updated for clients playing on the server. For other</para>
		/// <para> users you'll need to call RequestUserStats() again to refresh any data</para>
		/// <para>下载统计信息会返回一个 GSStatsReceived_t 回调函数完成时，如果用户没有统计数据，GSStatsReceived_t.m_eResult 将被设置为 k_EResultFail。这些统计数据只会自动更新对于在服务器上玩游戏的客户端。对于其他用户，您需要再次调用 RequestUserStats() 函数来刷新任何数据。</para>
		/// </summary>
		public static SteamAPICall_t RequestUserStats(CSteamID steamIDUser) {
			InteropHelp.TestIfAvailableGameServer();
			return (SteamAPICall_t)NativeMethods.ISteamGameServerStats_RequestUserStats(CSteamGameServerAPIContext.GetSteamGameServerStats(), steamIDUser);
		}

		/// <summary>
		/// <para> requests stat information for a user, usable after a successful call to RequestUserStats()</para>
		/// <para>请求用户统计信息，在成功调用 RequestUserStats() 后可用。</para>
		/// </summary>
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out int pData) {
			InteropHelp.TestIfAvailableGameServer();
			using (var pchName2 = new InteropHelp.UTF8StringHandle(pchName)) {
				return NativeMethods.ISteamGameServerStats_GetUserStatInt32(CSteamGameServerAPIContext.GetSteamGameServerStats(), steamIDUser, pchName2, out pData);
			}
		}

		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out float pData) {
			InteropHelp.TestIfAvailableGameServer();
			using (var pchName2 = new InteropHelp.UTF8StringHandle(pchName)) {
				return NativeMethods.ISteamGameServerStats_GetUserStatFloat(CSteamGameServerAPIContext.GetSteamGameServerStats(), steamIDUser, pchName2, out pData);
			}
		}

		public static bool GetUserAchievement(CSteamID steamIDUser, string pchName, out bool pbAchieved) {
			InteropHelp.TestIfAvailableGameServer();
			using (var pchName2 = new InteropHelp.UTF8StringHandle(pchName)) {
				return NativeMethods.ISteamGameServerStats_GetUserAchievement(CSteamGameServerAPIContext.GetSteamGameServerStats(), steamIDUser, pchName2, out pbAchieved);
			}
		}

		/// <summary>
		/// <para> Set / update stats and achievements.</para>
		/// <para> Note: These updates will work only on stats game servers are allowed to edit and only for</para>
		/// <para> game servers that have been declared as officially controlled by the game creators.</para>
		/// <para> Set the IP range of your official servers on the Steamworks page</para>
		/// <para>设置/更新统计数据和成就。请注意：这些更新仅适用于游戏服务器允许编辑以及由游戏创建者正式控制的服务器。在 Steamworks 页面上设置您官方服务器的 IP 范围。</para>
		/// </summary>
		public static bool SetUserStat(CSteamID steamIDUser, string pchName, int nData) {
			InteropHelp.TestIfAvailableGameServer();
			using (var pchName2 = new InteropHelp.UTF8StringHandle(pchName)) {
				return NativeMethods.ISteamGameServerStats_SetUserStatInt32(CSteamGameServerAPIContext.GetSteamGameServerStats(), steamIDUser, pchName2, nData);
			}
		}

		public static bool SetUserStat(CSteamID steamIDUser, string pchName, float fData) {
			InteropHelp.TestIfAvailableGameServer();
			using (var pchName2 = new InteropHelp.UTF8StringHandle(pchName)) {
				return NativeMethods.ISteamGameServerStats_SetUserStatFloat(CSteamGameServerAPIContext.GetSteamGameServerStats(), steamIDUser, pchName2, fData);
			}
		}

		public static bool UpdateUserAvgRateStat(CSteamID steamIDUser, string pchName, float flCountThisSession, double dSessionLength) {
			InteropHelp.TestIfAvailableGameServer();
			using (var pchName2 = new InteropHelp.UTF8StringHandle(pchName)) {
				return NativeMethods.ISteamGameServerStats_UpdateUserAvgRateStat(CSteamGameServerAPIContext.GetSteamGameServerStats(), steamIDUser, pchName2, flCountThisSession, dSessionLength);
			}
		}

		public static bool SetUserAchievement(CSteamID steamIDUser, string pchName) {
			InteropHelp.TestIfAvailableGameServer();
			using (var pchName2 = new InteropHelp.UTF8StringHandle(pchName)) {
				return NativeMethods.ISteamGameServerStats_SetUserAchievement(CSteamGameServerAPIContext.GetSteamGameServerStats(), steamIDUser, pchName2);
			}
		}

		public static bool ClearUserAchievement(CSteamID steamIDUser, string pchName) {
			InteropHelp.TestIfAvailableGameServer();
			using (var pchName2 = new InteropHelp.UTF8StringHandle(pchName)) {
				return NativeMethods.ISteamGameServerStats_ClearUserAchievement(CSteamGameServerAPIContext.GetSteamGameServerStats(), steamIDUser, pchName2);
			}
		}

		/// <summary>
		/// <para> Store the current data on the server, will get a GSStatsStored_t callback when set.</para>
		/// <para> If the callback has a result of k_EResultInvalidParam, one or more stats</para>
		/// <para> uploaded has been rejected, either because they broke constraints</para>
		/// <para> or were out of date. In this case the server sends back updated values.</para>
		/// <para> The stats should be re-iterated to keep in sync.</para>
		/// <para>存储当前数据到服务器，将收到一个 GSStatsStored_t 回调。</para>
		/// <para>如果回调结果是 k_EResultInvalidParam，则其中一个或多个上传的统计数据已被拒绝，原因可能是因为它们违反了约束条件或已过时。在这种情况下，服务器会返回更新后的值。统计数据应重新迭代以保持同步。</para>
		/// </summary>
		public static SteamAPICall_t StoreUserStats(CSteamID steamIDUser) {
			InteropHelp.TestIfAvailableGameServer();
			return (SteamAPICall_t)NativeMethods.ISteamGameServerStats_StoreUserStats(CSteamGameServerAPIContext.GetSteamGameServerStats(), steamIDUser);
		}
	}
}

#endif // !DISABLESTEAMWORKS
